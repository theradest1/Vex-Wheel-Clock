{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nLeft = Motor(Ports.PORT1, False)\ncontroller = Controller()\nRight = Motor(Ports.PORT2, True)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n#endregion VEXcode Generated Robot Configuration\n\n#forward\ndef onevent_controllerbuttonR1_pressed_0():\n    Right.set_velocity(100, PERCENT)\n    Right.spin(FORWARD)\n    Left.set_velocity(100, PERCENT)\n    Left.spin(FORWARD)\n\ndef onevent_controllerbuttonR1_released_0():\n    Right.stop()\n    Left.stop()\n\n#backwards\n\ndef onevent_controllerbuttonR2_pressed_0():\n    Right.set_velocity(100, PERCENT)\n    Right.spin(REVERSE)\n    Left.set_velocity(100, PERCENT)\n    Left.spin(REVERSE)\n\ndef onevent_controllerbuttonR2_released_0():\n    Right.stop()\n    Left.stop()\n\n\n#axis controls\ndef updateMotorSpeedsAxis():\n    #get axis info\n    axis1Pos = controller.axis2.position()\n    axis2Pos = controller.axis2.position()\n\n    #find motor percents\n    rightMotorPercent = clamp(axis1Pos - axis2Pos, -100, 100) \n    leftMotorPercent = clamp(axis1Pos + axis2Pos, -100, 100)\n\n    #forwards or backwards\n    Right.spin(FORWARD if rightMotorPercent > 0 else REVERSE)\n    Left.spin(FORWARD if leftMotorPercent > 0 else REVERSE)\n\n    #set motor speed\n    Right.set_velocity(abs(rightMotorPercent), PERCENT)\n    Left.set_velocity(abs(leftMotorPercent), PERCENT)\n\ndef onevent_controlleraxis1Changed_0():\n    updateMotorSpeedsAxis()\n\ndef onevent_controlleraxis2Changed_0():\n    updateMotorSpeedsAxis()\n\n\ndef clamp(num, minimum, maximum):\n    return max(minimum, min(num, maximum))\n\n\ndef when_started1():\n    #motor settings\n    Left.set_max_torque(100, PERCENT)\n    Right.set_max_torque(100, PERCENT)\n    Left.set_stopping(BRAKE)\n    Right.set_stopping(BRAKE)\n\n\n# system event handlers\ncontroller.buttonR1.pressed(onevent_controllerbuttonR1_pressed_0)\ncontroller.buttonR1.released(onevent_controllerbuttonR1_released_0)\n\ncontroller.buttonR2.pressed(onevent_controllerbuttonR2_pressed_0)\ncontroller.buttonR2.released(onevent_controllerbuttonR2_released_0)\n\n#controller.axis1.changed(onevent_controlleraxis1Changed_0)\n#controller.axis2.changed(onevent_controlleraxis2Changed_0)\n\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[2],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}