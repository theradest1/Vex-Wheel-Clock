{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable></variables><block type=\"exp_events_when_controller_button\" id=\"suHooVdw50_*@ZXs{LrQ\" x=\"650\" y=\"-50\"><field name=\"BUTTON\">ButtonL1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"exp_motion_set_motor_velocity\" id=\"yL1g?$-3}vM%i_h|}$ez\"><field name=\"MOTOR\">Left</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"|dt_0?xGk1iG$Wy!]UTb\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"exp_motion_spin\" id=\"m,WFpgv9xtY;9.MTOx9x\"><field name=\"MOTOR\">Left</field><field name=\"DIRECTION\">fwd</field></block></next></block></next></block><block type=\"exp_events_when_controller_button\" id=\"A.U)x|=A,NrI10jvlhRw\" x=\"1130\" y=\"30\"><field name=\"BUTTON\">ButtonR1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"exp_motion_set_motor_velocity\" id=\"H)1l0GFvC#wy5rDDEmGD\"><field name=\"MOTOR\">Right</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"kS]YzxxGZL`HWryBNvzB\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"exp_motion_spin\" id=\"VzkKkmIX0L.t;b6.uXoY\"><field name=\"MOTOR\">Right</field><field name=\"DIRECTION\">fwd</field></block></next></block></next></block><block type=\"exp_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"exp_motion_set_motor_torque\" id=\"V2ch}5NB4iL0ZvdAod%M\"><field name=\"MOTOR\">Left</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"I!JFz;z31Dv4OUgHA!QZ\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"exp_motion_set_motor_stopping\" id=\"DXJ7kt`t52@0`Fe7^2@+\"><field name=\"MOTOR\">Left</field><field name=\"MODE\">hold</field></block></next></block></next></block><block type=\"exp_events_when_controller_button\" id=\"X4-.Vlihb3Jdh-[B4bgB\" x=\"650\" y=\"210\"><field name=\"BUTTON\">ButtonL1</field><field name=\"EVENTTYPE\">released</field><next><block type=\"exp_motion_stop_motor\" id=\"Q{/Ag#[8?h`}b7O2)pkP\"><field name=\"MOTOR\">Left</field></block></next></block><block type=\"exp_events_when_controller_button\" id=\"uiV:YM_Wss1g]Sj]sLn)\" x=\"1110\" y=\"210\"><field name=\"BUTTON\">ButtonR1</field><field name=\"EVENTTYPE\">released</field><next><block type=\"exp_motion_stop_motor\" id=\"m*)H8?Fzk#CJ+?5#j=BU\"><field name=\"MOTOR\">Right</field></block></next></block><block type=\"exp_events_when_controller_axis\" id=\"h(;B_/8nUf[lTr`m!fd_\" x=\"70\" y=\"310\"><field name=\"AXIS\">Axis1</field><next><block type=\"exp_control_if_elseif_else\" id=\"zqWwU~bD~JdA*yn-hLz#\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" branches=\"2\"></mutation><value name=\"CONDITION1\"><block type=\"exp_operator_greater_than\" id=\"xJ3qO31/9J/a5/q=@r{^\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"|hOerz4Yw2jV9.}_wSJ4\"><field name=\"NUM\">0</field></shadow><block type=\"exp_sensing_position_of_controller\" id=\".{+L+,EoI`{,ivBc~e@5\"><field name=\"AXIS\">Axis1</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"xDEq$v59}VtQ;!41hqbh\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK1\"><block type=\"exp_motion_spin\" id=\"4~]%D=C().!Rqo$LZ-G.\"><field name=\"MOTOR\">Left</field><field name=\"DIRECTION\">fwd</field></block></statement><value name=\"CONDITION2\"><block type=\"exp_operator_less_than\" id=\"H[eb+;10hL1ImlThTqqw\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"1Woc~q@Hkqs@2h%pz/VL\"><field name=\"NUM\">0</field></shadow><block type=\"exp_sensing_position_of_controller\" id=\"C.=#k2m!@*A`.ZnG*A]t\"><field name=\"AXIS\">Axis1</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"vY;Ba-x.,/{xV3S:;l;T\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK2\"><block type=\"exp_motion_spin\" id=\"/P/|g2yNg-rr-a/cf;ap\"><field name=\"MOTOR\">Left</field><field name=\"DIRECTION\">rev</field></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"exp_motion_stop_motor\" id=\"*abqJo`$Dt5u29?ds!P5\"><field name=\"MOTOR\">Left</field></block></statement><next><block type=\"exp_motion_set_motor_velocity\" id=\"ZaBu]@!oEF]74E2RK8Ck\"><field name=\"MOTOR\">Left</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"IsUtM*($4j$a?+@H3/Z!\"><field name=\"NUM\">100</field></shadow><block type=\"exp_operator_function\" id=\"44EL_5L#RxWoEO)Bp}Bb\"><field name=\"OPERATOR\">abs</field><value name=\"NUM\"><shadow type=\"math_number\" id=\"Ugg6^p#H}Ogg|E?adJ+L\"><field name=\"NUM\">0</field></shadow><block type=\"exp_sensing_position_of_controller\" id=\"N];~_+XthY0TI0SCUAV4\"><field name=\"AXIS\">Axis1</field></block></value></block></value></block></next></block></next></block></xml>","rconfig":[{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"}},{"port":[2],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START EXP MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END EXP MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor Left = motor(PORT1, false);\n\ncontroller Controller = controller();\nmotor Right = motor(PORT2, false);\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n// Include the EXP Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when Controller ButtonL1 pressed\" hat block\nvoid onevent_ControllerButtonL1_pressed_0() {\n  Left.setVelocity(100.0, percent);\n  Left.spin(forward);\n}\n\n// \"when Controller ButtonR1 pressed\" hat block\nvoid onevent_ControllerButtonR1_pressed_0() {\n  Right.setVelocity(100.0, percent);\n  Right.spin(forward);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Left.setMaxTorque(100.0, percent);\n  Left.setStopping(hold);\n  return 0;\n}\n\n// \"when Controller ButtonL1 released\" hat block\nvoid onevent_ControllerButtonL1_released_0() {\n  Left.stop();\n}\n\n// \"when Controller ButtonR1 released\" hat block\nvoid onevent_ControllerButtonR1_released_0() {\n  Right.stop();\n}\n\n// \"when Controller Axis1 changed\" hat block\nvoid onevent_ControllerAxis1Changed_0() {\n  if (Controller.Axis1.position() > 0.0) {\n    Left.spin(forward);\n  } else if (Controller.Axis1.position() < 0.0) {\n    Left.spin(reverse);\n  } else {\n    Left.stop();\n  }\n  Left.setVelocity(fabs(static_cast<float>(Controller.Axis1.position())), percent);\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonL1.pressed(onevent_ControllerButtonL1_pressed_0);\n  Controller.ButtonR1.pressed(onevent_ControllerButtonR1_pressed_0);\n  Controller.ButtonL1.released(onevent_ControllerButtonL1_released_0);\n  Controller.ButtonR1.released(onevent_ControllerButtonR1_released_0);\n  Controller.Axis1.changed(onevent_ControllerAxis1Changed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // Wait for ADI sensors to initialize\n  wait(100, msec);\n\n\n  whenStarted1();\n}","target":"Physical"}