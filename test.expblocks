{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable></variables><block type=\"exp_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"exp_motion_set_motor_position\" id=\"pA?JI]$!P4za`w2}y)Q6\"><field name=\"MOTOR\">Motor2</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"mk$GhCklMGd+ZpWzgd*r\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"exp_motion_spin_to_position\" id=\"/W5SoH-lZ4H{I:Yife|W\"><field name=\"MOTOR\">Motor2</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\")e{l6Z_DVnvLiPayJ]@*\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"exp_looks_clear_all_rows\" id=\"4$;HTTuWhop$F()Q#pNU\"><field name=\"TARGET\">Brain</field><next><block type=\"exp_looks_set_cursor\" id=\"GME#-@p3n(T78S:/[HjC\"><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"5dddFf4+O/~oD%M`dD,X\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"PMNJeLI6MOf39_n;Wlql\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"exp_looks_print\" id=\"tikzu[RC.DFC.W5-e52V\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"*pbYCQwP?1B.KV_bf]VP\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"exp_sensing_position_of_motor\" id=\"l*@#1cf#w-pke_LB}dV{\"><field name=\"MOTOR\">Motor2</field><field name=\"UNITS\">deg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[2],"name":"Motor2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"EXP","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START EXP MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END EXP MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor Motor2 = motor(PORT2, false);\n\n\n\n\n// Generated code.\n\n// Include the EXP Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Motor2.setPosition(0.0, degrees);\n  Motor2.spinToPosition(90.0, degrees, true);\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Motor2.position(degrees)));\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // Wait for ADI sensors to initialize\n  wait(100, msec);\n\n\n  whenStarted1();\n}","target":"Physical"}