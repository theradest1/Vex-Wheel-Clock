{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nminuteLeft = Motor(Ports.PORT1, True)\nminuteRight = Motor(Ports.PORT2, False)\nhourLeft = Motor(Ports.PORT3, True)\nhourRight = Motor(Ports.PORT4, False)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      clock\n#\tAuthor:       ya boi\n#\tCreated:\n#\tDescription:  yup\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport time\n\ninitialHours = 0\ninitialMinutes = 5\ninitialSeconds = 0\n\ngearRatio = 2.5\n\ndef motorSetup(motorSpeed):\n    minuteRight.set_velocity(motorSpeed, RPM)\n    minuteLeft.set_velocity(motorSpeed, RPM)\n    hourRight.set_velocity(motorSpeed, RPM)\n    hourLeft.set_velocity(motorSpeed, RPM)\n\ndef calibrateMotors():\n    minuteRight.set_position(0, DEGREES)\n    minuteLeft.set_position(0, DEGREES)\n    hourRight.set_position(0, DEGREES)\n    hourLeft.set_position(0, DEGREES)\n\ndef printToScreen(text):\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(text)\n\ndef getOffsetTime(minutes, seconds, hours):\n    offsetHours = time.localtime()[3] + hours\n    offsetMinutes = time.localtime()[4] + minutes\n    offsetSeconds = time.localtime()[5] + seconds\n\n    if offsetSeconds >= 60:\n        offsetSeconds -= 60\n        offsetMinutes += 1\n    \n    if offsetMinutes >= 60:\n        offsetMinutes -= 60\n        offsetHours += 1\n    \n    if offsetHours >= 24:\n        offsetHours -= 24\n\n    return offsetHours, offsetMinutes, offsetSeconds\n\ndef main():\n    motorSetup(150)\n    calibrateMotors()\n\n    while True:\n        #get time\n        hours, minutes, seconds = getOffsetTime(initialMinutes, initialSeconds, initialHours)\n\n        #seperate digits\n        seconds_10 = int((seconds - seconds%10)/10)\n        seconds_1 = int(seconds%10)\n\n        minutes_10 = int((minutes - minutes%10)/10)\n        minutes_1 = int(minutes%10)\n\n        #debug\n        printToScreen(str(minutes_10) + str(minutes_1) + \":\" + str(seconds_10) + str(seconds_1))\n\n        #move motors\n        hourLeft.spin_to_position(36 * minutes_10 * gearRatio, DEGREES, wait=False)\n        hourRight.spin_to_position(36 * minutes_1, DEGREES, wait=False)\n\n        minuteLeft.spin_to_position(36 * seconds_10, DEGREES, wait=False)\n        minuteRight.spin_to_position(36 * seconds_1 * gearRatio, DEGREES, wait=False)\n\n\nmain()","textLanguage":"python","rconfig":[{"port":[1],"name":"minuteLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"minuteRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"hourLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"hourRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}