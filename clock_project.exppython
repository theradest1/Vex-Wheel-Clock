{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nminuteLeft = Motor(Ports.PORT1, True)\nminuteRight = Motor(Ports.PORT2, False)\nhourLeft = Motor(Ports.PORT3, True)\nhourRight = Motor(Ports.PORT4, False)\ntimerButton = Bumper(brain.three_wire_port.a)\ntimeSetter = Encoder(brain.three_wire_port.c)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      clock\n#\tAuthor:       ya boi\n#\tCreated:\n#\tDescription:  yup\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport time\n\ninitialMinutes = 0\ninitialSeconds = 0\n\ngearRatio = 2.5\n\ndef motorSetup(motorSpeed):\n    minuteRight.set_velocity(motorSpeed, RPM)\n    minuteLeft.set_velocity(motorSpeed, RPM)\n    hourRight.set_velocity(motorSpeed, RPM)\n    hourLeft.set_velocity(motorSpeed, RPM)\n\ndef calibrateMotors():\n    minuteRight.set_position(0, DEGREES)\n    minuteLeft.set_position(0, DEGREES)\n    hourRight.set_position(0, DEGREES)\n    hourLeft.set_position(0, DEGREES)\n\ndef printToScreen(text):\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(text)\n\ndef setClock(minutes, seconds):\n    seconds_10 = int((seconds - seconds%10)/10)\n    seconds_1 = int(seconds%10)\n\n    minutes_10 = int((minutes - minutes%10)/10)\n    minutes_1 = int(minutes%10)\n\n    hourLeft.spin_to_position(36 * minutes_10 * gearRatio, DEGREES, wait=False)\n    hourRight.spin_to_position(36 * minutes_1, DEGREES, wait=False)\n\n    minuteLeft.spin_to_position(36 * seconds_10, DEGREES, wait=False)\n    minuteRight.spin_to_position(36 * seconds_1 * gearRatio, DEGREES, wait=False)\n\n    printToScreen(str(minutes) + \":\" + str(seconds))\n\ndef getOffsetTime(minutes, seconds, wrapMinutes = True):\n    minutes += time.localtime()[4]\n    seconds += time.localtime()[5]\n\n    totalSeconds = seconds + minutes * 60\n\n    minutes = int(totalSeconds/60)\n    seconds = totalSeconds - minutes * 60\n\n    if wrapMinutes:\n        minutes %= 60\n\n    return minutes, seconds\n\n\ndef poll_timer_value():\n    #for timer\n    motorSetup(600)\n\n    minutes = 0\n    seconds = 0\n\n    while (timerButton.pressing() == False):\n        #getting value from timeSetter and showing on screen\n        pos = abs(timeSetter.position(DEGREES))/20\n        minutes = int(pos/60) \n        seconds = pos - minutes * 60\n        minutes %= 60\n\n        setClock(minutes, seconds)\n        #main()\n\n        time.sleep(0.2)\n    \n    initialMinutes = -int(minutes + time.localtime()[4])\n    initialSeconds = -int(seconds + time.localtime()[5])\n\n    while seconds != 0 or minutes != 0:\n        minutes, seconds = getOffsetTime(initialMinutes, initialSeconds, False)\n        minutes = abs(minutes)\n        seconds = abs(seconds)\n\n        setClock(minutes, seconds)\n    \n    for i in range(1, 20):\n        #for i in range(4):\n        brain.play_note(2, i, 10)\n        time.sleep(1/i)\n\n\ndef main():\n    while True:\n        poll_timer_value()\n\n\nmain()","textLanguage":"python","rconfig":[{"port":[1],"name":"minuteLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"minuteRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"hourLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"hourRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"timerButton","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[3,4],"name":"timeSetter","customName":true,"deviceType":"Encoder","deviceClass":"encoder","setting":{},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}