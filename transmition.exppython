{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nShifter_1 = Motor(Ports.PORT1, False)\nDrive = Motor(Ports.PORT2, False)\ncontroller = Controller()\nShifter_2 = Motor(Ports.PORT3, False)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode EXP Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\nDrive.set_velocity(100, PERCENT)\nDrive.set_max_torque(100, PERCENT)\n\nShifter_1.set_stopping(HOLD)\nShifter_2.set_stopping(HOLD)\nDrive.set_stopping(COAST)\n\nShifter_1.set_position(0, DEGREES)\nShifter_2.set_position(0, DEGREES)\nDrive.set_position(0, DEGREES)\n\ncurrentGear = 0 #0 is neutral\nmaxGear = 3\n\n#all time is in ms\nautomaticShifting = False\n\nlastGearChangeTime = 0\nminGearChangeTime = 300 #only for automatic shifting[]\nvelPercentForGearUp = 98 #in percent\nvelPercentForGearDown = 20 #in percent\n\nbrain.timer.clear()\n\ndef shiftTo(newGear):\n    global currentGear, lastGearChangeTime\n\n    lastGearChangeTime = brain.timer.time(MSEC)\n\n    if newGear >= 0 and newGear <= maxGear:\n        currentGear = newGear\n\n    #actually set gear\n    if currentGear == 0:\n        Shifter_1.set_velocity(100, PERCENT)\n        Shifter_1.set_max_torque(100, PERCENT)\n        Shifter_2.set_velocity(100, PERCENT)\n        Shifter_2.set_max_torque(100, PERCENT)\n\n        Shifter_1.spin_to_position(0, DEGREES, False)\n        Shifter_2.spin_to_position(0, DEGREES, False)\n    elif currentGear == 1:\n        Shifter_1.set_velocity(35, PERCENT)\n        Shifter_1.set_max_torque(80, PERCENT)\n        Shifter_2.set_velocity(100, PERCENT)\n        Shifter_2.set_max_torque(100, PERCENT)\n\n        Shifter_2.spin_to_position(0, DEGREES, True)\n        Shifter_1.spin_to_position(45, DEGREES, False)\n    elif currentGear == 2:\n        Shifter_1.set_velocity(35, PERCENT)\n        Shifter_1.set_max_torque(80, PERCENT)\n        Shifter_2.set_velocity(100, PERCENT)\n        Shifter_2.set_max_torque(100, PERCENT)\n\n        Shifter_2.spin_to_position(0, DEGREES, True)\n        Shifter_1.spin_to_position(-45, DEGREES, False)\n    elif currentGear == 3:\n        Shifter_1.set_velocity(100, PERCENT)\n        Shifter_1.set_max_torque(100, PERCENT)\n        Shifter_2.set_velocity(35, PERCENT)\n        Shifter_2.set_max_torque(80, PERCENT)\n\n        Shifter_1.spin_to_position(0, DEGREES, True)\n        Shifter_2.spin_to_position(45, DEGREES, False)\n\ndef shiftUp():\n    shiftTo(currentGear + 1)\n\ndef shiftDown():\n    shiftTo(currentGear - 1)\n\ndef toggleAutomatic():\n    global automaticShifting\n    automaticShifting = not(automaticShifting)\n\ndef main():\n    while True:\n        if automaticShifting:\n            #if a gear change was long enough time ago\n            if brain.timer.time(MSEC) - lastGearChangeTime > minGearChangeTime:\n                #if the drive motor velocity is high enough\n                if Drive.velocity(PERCENT) >= velPercentForGearUp and currentGear < maxGear:\n                    shiftUp()\n\n                #if the drive motor veloity is low enough\n                if Drive.velocity(PERCENT) <= velPercentForGearDown and currentGear > 1:\n                    shiftDown()\n\n        #drive\n        if controller.buttonR1.pressing():\n            Drive.spin(FORWARD)\n        elif controller.buttonR2.pressing():\n            Drive.spin(REVERSE)\n        else:\n            Drive.stop()\n            #go to nutral if not accelerating\n            if automaticShifting:\n                shiftTo(0)\n        \n\n        #debug\n        brain.screen.set_cursor(1,1)\n        brain.screen.clear_row(1)\n        brain.screen.print(\"Vel (RPM): \" + str(Drive.velocity(RPM)))\n\n        brain.screen.set_cursor(2,1)\n        brain.screen.clear_row(2)\n        brain.screen.print(\"Vel (PRCNT): \" + str(Drive.velocity(PERCENT)))\n\n        brain.screen.set_cursor(3,1)\n        brain.screen.clear_row(3)\n        brain.screen.print(\"Gear: \" + str(currentGear))\n\n        brain.screen.set_cursor(4,1)\n        brain.screen.clear_row(4)\n        brain.screen.print(\"Shift time: \" + str(brain.timer.time(SECONDS) - lastGearChangeTime/1000))\n\n\ncontroller.buttonA.pressed(shiftUp)\ncontroller.buttonB.pressed(shiftDown)\ncontroller.buttonL1.pressed(toggleAutomatic)\nmain()","textLanguage":"python","rconfig":[{"port":[1],"name":"Shifter_1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"Drive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[3],"name":"Shifter_2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"EXP","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}